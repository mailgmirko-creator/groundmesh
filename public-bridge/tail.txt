AGGREGATED | Updated: 2025-09-11 20:30:34



-a----        11/09/2025     17:12           1848 reader.ps1
----                 -------------         ------ ----
Mode                 LastWriteTime         Length Name


    Directory: C:\Projects\Bridge


PS C:\Projects\Bridge> Get-ChildItem .\reader.ps1
**********************
Command start time: 20250911171240
**********************
PS C:\Projects\Bridge> # Verify it exists
**********************
Command start time: 20250911171240
**********************
'@ | Set-Content -Encoding UTF8 .\reader.ps1
}
  }
    $ctx.Response.OutputStream.Close()
  } finally {
    Write-Host "Bridge error: $_" -ForegroundColor Red
  } catch {
    }
      }
        $res.OutputStream.Write($bytes,0,$bytes.Length)
        $res.StatusCode = 200
        $res.ContentType = "text/plain; charset=utf-8"
        $bytes = [Text.Encoding]::UTF8.GetBytes($msg)
        $msg = "Use /tail to read the latest $Tail lines."
      default {
      }
        $res.OutputStream.Write($bytes,0,$bytes.Length)
        $res.StatusCode = 200
        $res.ContentType = "text/plain; charset=utf-8"
        $bytes = [Text.Encoding]::UTF8.GetBytes($text)
        $text  = ($lines -join "`n")
        $lines = Get-Content $file -ErrorAction SilentlyContinue | Select-Object -Last $Tail
        }
          break
          $res.OutputStream.Write($bytes,0,$bytes.Length)
          $res.StatusCode = 404
          $bytes = [Text.Encoding]::UTF8.GetBytes($msg)
          $msg = "No transcript files found."
        if (-not $file) {
        $file = Get-LatestTranscript -Dir $TranscriptDir
      "/tail" {
    switch ($req.Url.AbsolutePath) {

    $res = $ctx.Response
    $req = $ctx.Request
  try {
  $ctx = $listener.GetContext()
while ($listener.IsListening) {

}
  if ($files) { return $files[0].FullName } else { return $null }
  $files = Get-ChildItem $Dir -Filter "ps_transcript_*.txt" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending
  param([string]$Dir)
function Get-LatestTranscript {

Write-Host "ðŸ”Ž Bridge reader listening on $prefix"
$listener.Start()
$listener.Prefixes.Add($prefix)
$listener.Prefixes.Clear()
$prefix = "http://127.0.0.1:$Port/"
$listener = [System.Net.HttpListener]::new()

Add-Type -AssemblyName System.Net.HttpListener

)
  [int]$Tail = 400
  [int]$Port = 5059,
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\Bridge> @'
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> cd C:\Projects\Bridge
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> New-Item -ItemType Directory -Force -Path C:\Projects\Bridge | Out-Null
**********************
Command start time: 20250911171240
**********************
PS C:\Projects\Bridge> cd C:\Projects
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> cd C:\Projects\Bridge
**********************
Command start time: 20250911171212
**********************
PS C:\Projects> New-Item -ItemType Directory -Force -Path C:\Projects\Bridge | Out-Null
**********************
Command start time: 20250911171212
**********************
PS [HOME]\\Projects
**********************
Command start time: 20250911171211
**********************
ðŸŸ¢ Transcript recording to: C:\Projects\Bridge\transcripts\ps_transcript_20250911_171115.txt
PS C:\Users\mailg> Write-Host "ðŸŸ¢ Transcript recording to: $Transcript"
**********************
Command start time: 20250911171115
**********************
**********************
SerializationVersion: 1.1.0.1
PSRemotingProtocolVersion: 2.3
WSManStackVersion: 3.0
CLRVersion: 4.0.30319.42000
BuildVersion: 10.0.19041.6328
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.19041.6328
PSEdition: Desktop
PSVersion: 5.1.19041.6328
Process ID: 5576
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Machine: DESKTOP-C9G76VK (Microsoft Windows NT 10.0.19045.0)
Configuration Name: 
RunAs User: DESKTOP-C9G76VK\mailg
Username: DESKTOP-C9G76VK\mailg
Start time: 20250911171115
Windows PowerShell transcript start
**********************

PS C:\Projects\GroundMesh-DEV> pt
**********************
Command start time: 20250911203034
**********************
Model written: apps\tsl\artifacts\principles_model.json (5331 bytes)

PS C:\Projects\GroundMesh-DEV> & "C:\Projects\GroundMesh-DEV\tools\run-tsl.ps1"
**********************
Command start time: 20250911203034
**********************
PS C:\Projects\GroundMesh-DEV> # Run the job once (optional) and refresh eyes so I can see it
**********************
Command start time: 20250911203034
**********************
PS C:\Projects\GroundMesh-DEV> Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
**********************
Command start time: 20250911203034
**********************

PS C:\Projects\GroundMesh-DEV> git push -u origin dev
**********************
Command start time: 20250911203031
**********************

PS C:\Projects\GroundMesh-DEV> git commit -F $MsgFile
**********************
Command start time: 20250911203031
**********************

PS C:\Projects\GroundMesh-DEV> git add tools/run-tsl.ps1
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> Set-Content -Path $MsgFile -Encoding UTF8 -Value "feat(tsl): add minimal job runner (PowerShell)"
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> $MsgFile = Join-Path $DevRepo "COMMITMSG.txt"
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> # Commit runner
**********************
Command start time: 20250911203031
**********************
'@ | Set-Content -Encoding UTF8 (Join-Path $Tools "run-tsl.ps1")

}
  Write-Host "Model file not found after run: $model"
} else {
  Write-Host "Model written: $model ($size bytes)"
  $size = (Get-Item $model).Length
if (Test-Path $model) {
# Simple verification

}
  exit $LASTEXITCODE
  Write-Host "Learner failed with exit code $LASTEXITCODE."
if ($LASTEXITCODE -ne 0) {
& python "apps/tsl/tsl_core/learner.py" $inYaml $outDir
# Run the learner

New-Item -ItemType Directory -Force -Path $outDir | Out-Null
# Ensure output directory exists

$model   = Join-Path $outDir ($job.outputs.model_file)
$outDir  = $job.outputs.artifact_dir
$inYaml  = $job.inputs.principles_yaml

}
  exit 1
  Write-Host "Python not found on PATH. Install Python 3.8+."
if (-not $py) {
$py = Get-Command python -ErrorAction SilentlyContinue

}
  exit 1
  Write-Host "Failed to parse job JSON: $JobFile"
} catch {
  $job = Get-Content $JobFile -Raw | ConvertFrom-Json
try {

}
  exit 1
  Write-Host "Job file not found: $JobFile"
if (-not (Test-Path $JobFile)) {

)
  [string]$JobFile = "apps/tsl/jobs/learn_principles.json"
param(
PS C:\Projects\GroundMesh-DEV> @'
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> New-Item -ItemType Directory -Force -Path $Tools | Out-Null
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> $Tools = Join-Path $DevRepo "tools"
**********************
Command start time: 20250911203031
**********************

PS C:\Projects\GroundMesh-DEV> git checkout dev
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> cd $DevRepo
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> $DevRepo = "C:\Projects\GroundMesh-DEV"
**********************
Command start time: 20250911203031
**********************
PS C:\Projects\GroundMesh-DEV> # === Add a minimal TSL job runner, commit to dev, run once, refresh eyes ===
**********************
Command start time: 20250911203031
**********************




PS C:\Projects\GroundMesh-DEV> pt
**********************
Command start time: 20250911202612
**********************
PS C:\Projects\GroundMesh-DEV> # 4) Publish now (eyes auto-refresh), no branch switching in main tree
**********************
Command start time: 20250911202612
**********************
'@ | Set-Content -Encoding UTF8 (Join-Path $Tools 'publish-tail.ps1')
Pop-Location
Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
& git push -u origin bridge-public
& git commit -F $MsgFile
& git add public-bridge\tail.md
& git add public-bridge\tail.txt
Set-Content -Path $MsgFile -Value 'publish tail snapshot (worktree)' -Encoding UTF8
$MsgFile = Join-Path (Get-Location) 'COMMITMSG.txt'
Push-Location $WorktreeRoot
# 5) Commit & push from INSIDE the worktree

[IO.File]::WriteAllLines($MdFile, $md, $enc)
$md.Add('```') | Out-Null
foreach($l in $redacted){ $md.Add($l) | Out-Null }
$md.Add('```text') | Out-Null
$md.Add('') | Out-Null
$md.Add('- Updated: ' + $updated) | Out-Null
$md.Add('') | Out-Null
$md.Add('# PowerShell Transcript Tail (Aggregated)') | Out-Null
$md = New-Object System.Collections.Generic.List[string]
# tail.md â€” human order with header

[IO.File]::WriteAllLines($TxtFile, @("AGGREGATED | Updated: $updated") + $rev, $enc)
$rev = $redacted.Clone(); [Array]::Reverse($rev)
# tail.txt â€” newest-first with header

$updated = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
$enc = New-Object Text.UTF8Encoding($false)
New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
$MdFile  = Join-Path $OutDir 'tail.md'
$TxtFile = Join-Path $OutDir 'tail.txt'
$OutDir  = Join-Path $WorktreeRoot 'public-bridge'
# 4) Write outputs into the WORKTREE (not the main tree)

}
  $x
  $x = [regex]::Replace($x,'([A-Za-z]:\\Users\\[^\\]+\\)','[HOME]\\')
  $x = [regex]::Replace($x,'Bearer\s+[A-Za-z0-9\._\-]+','Bearer [REDACTED]')
  $x = [regex]::Replace($x,'sk-[A-Za-z0-9\-_]{20,}','[REDACTED_KEY]')
  $x = [regex]::Replace($x,'ghp_[A-Za-z0-9]{36,}','[REDACTED_GH_TOKEN]')
  $x = $line
$redacted = foreach ($line in $globalTail) {
if (-not $globalTail) { $globalTail = @('<empty>') }
$globalTail = $lines | Select-Object -Last $Count
# 3) Global tail â†’ redact

}
  }
    foreach ($p in $parts) { if ($p -ne $null) { $lines.Add($p) | Out-Null } }
    $parts = [Text.RegularExpressions.Regex]::Split($t,'\r?\n')
  if ($t) {
  $t = Read-UnlockedText -Path $f.FullName
foreach ($f in $pick) {
$lines  = New-Object System.Collections.Generic.List[string]
# 2) Merge lines from picked files

$pick = $all | Sort-Object Name -Descending | Select-Object -First $LookBackFiles
if (-not $all) { Write-Output 'No transcript found.'; exit 1 }
$all = Get-ChildItem -Path $TranscriptDir -Filter 'ps_transcript_*.txt' -ErrorAction SilentlyContinue
# 1) Collect newest-by-name transcripts

}
  } catch { return $null }
    finally { $fs.Close() }
    try { $sr = New-Object IO.StreamReader($fs,[Text.Encoding]::UTF8,$true); $t=$sr.ReadToEnd(); $sr.Close(); return $t }
    $fs = New-Object System.IO.FileStream($Path,[IO.FileMode]::Open,[IO.FileAccess]::Read,[IO.FileShare]::ReadWrite)
  try {
  param([string]$Path)
function Read-UnlockedText {

)
  [string]$WorktreeRoot = "C:\Projects\GroundMesh-DEV\.bridge-wt"
  [int]$LookBackFiles = 6,
  [Alias("Lines")][int]$Count = 400,
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\GroundMesh-DEV> @'
**********************
Command start time: 20250911202612
**********************
PS C:\Projects\GroundMesh-DEV> New-Item -ItemType Directory -Force -Path $Tools | Out-Null
**********************
Command start time: 20250911202612
**********************
PS C:\Projects\GroundMesh-DEV> $Tools = Join-Path $DevRepo "tools"
**********************
Command start time: 20250911202612
**********************
PS C:\Projects\GroundMesh-DEV> # 3) Overwrite publisher to use the dedicated worktree
**********************
Command start time: 20250911202612
**********************
PS C:\Projects\GroundMesh-DEV> Remove-Item -Recurse -Force (Join-Path $DevRepo "public-bridge") -ErrorAction SilentlyContinue
**********************
Command start time: 20250911202612
**********************
PS C:\Projects\GroundMesh-DEV> # 2) Ensure no stray public-bridge files linger in the main worktree
**********************
Command start time: 20250911202612
**********************

}
  Push-Location $WT; git push -u origin bridge-public; Pop-Location
  git worktree add -B bridge-public $WT
} else {
  git worktree add -B bridge-public $WT origin/bridge-public
PS C:\Projects\GroundMesh-DEV> if ((git ls-remote --heads origin bridge-public) -ne $null) {
**********************
Command start time: 20250911202609
**********************
PS C:\Projects\GroundMesh-DEV> # If branch doesn't exist yet remotely, this creates local branch from current HEAD; else tracks remote.
**********************
Command start time: 20250911202609
**********************

PS C:\Projects\GroundMesh-DEV> & git worktree remove --force $WT 2>$null
**********************
Command start time: 20250911202609
**********************

PS C:\Projects\GroundMesh-DEV> git fetch origin
**********************
Command start time: 20250911202607
**********************
PS C:\Projects\GroundMesh-DEV> # 1) Fetch and create a clean worktree for bridge-public
**********************
Command start time: 20250911202607
**********************
PS C:\Projects\GroundMesh-DEV> cd $DevRepo
**********************
Command start time: 20250911202607
**********************
PS C:\Projects\GroundMesh-DEV> $WT      = "C:\Projects\GroundMesh-DEV\.bridge-wt"
**********************
Command start time: 20250911202607
**********************
PS C:\Projects\GroundMesh-DEV> $DevRepo = "C:\Projects\GroundMesh-DEV"
**********************
