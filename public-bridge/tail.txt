AGGREGATED | Updated: 2025-09-11 20:56:48



-a----        11/09/2025     17:12           1848 reader.ps1
----                 -------------         ------ ----
Mode                 LastWriteTime         Length Name


    Directory: C:\Projects\Bridge


PS C:\Projects\Bridge> Get-ChildItem .\reader.ps1
**********************
Command start time: 20250911171240
**********************
PS C:\Projects\Bridge> # Verify it exists
**********************
Command start time: 20250911171240
**********************
'@ | Set-Content -Encoding UTF8 .\reader.ps1
}
  }
    $ctx.Response.OutputStream.Close()
  } finally {
    Write-Host "Bridge error: $_" -ForegroundColor Red
  } catch {
    }
      }
        $res.OutputStream.Write($bytes,0,$bytes.Length)
        $res.StatusCode = 200
        $res.ContentType = "text/plain; charset=utf-8"
        $bytes = [Text.Encoding]::UTF8.GetBytes($msg)
        $msg = "Use /tail to read the latest $Tail lines."
      default {
      }
        $res.OutputStream.Write($bytes,0,$bytes.Length)
        $res.StatusCode = 200
        $res.ContentType = "text/plain; charset=utf-8"
        $bytes = [Text.Encoding]::UTF8.GetBytes($text)
        $text  = ($lines -join "`n")
        $lines = Get-Content $file -ErrorAction SilentlyContinue | Select-Object -Last $Tail
        }
          break
          $res.OutputStream.Write($bytes,0,$bytes.Length)
          $res.StatusCode = 404
          $bytes = [Text.Encoding]::UTF8.GetBytes($msg)
          $msg = "No transcript files found."
        if (-not $file) {
        $file = Get-LatestTranscript -Dir $TranscriptDir
      "/tail" {
    switch ($req.Url.AbsolutePath) {

    $res = $ctx.Response
    $req = $ctx.Request
  try {
  $ctx = $listener.GetContext()
while ($listener.IsListening) {

}
  if ($files) { return $files[0].FullName } else { return $null }
  $files = Get-ChildItem $Dir -Filter "ps_transcript_*.txt" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending
  param([string]$Dir)
function Get-LatestTranscript {

Write-Host "ðŸ”Ž Bridge reader listening on $prefix"
$listener.Start()
$listener.Prefixes.Add($prefix)
$listener.Prefixes.Clear()
$prefix = "http://127.0.0.1:$Port/"
$listener = [System.Net.HttpListener]::new()

Add-Type -AssemblyName System.Net.HttpListener

)
  [int]$Tail = 400
  [int]$Port = 5059,
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\Bridge> @'
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> cd C:\Projects\Bridge
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> New-Item -ItemType Directory -Force -Path C:\Projects\Bridge | Out-Null
**********************
Command start time: 20250911171240
**********************
PS C:\Projects\Bridge> cd C:\Projects
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> cd C:\Projects\Bridge
**********************
Command start time: 20250911171212
**********************
PS C:\Projects> New-Item -ItemType Directory -Force -Path C:\Projects\Bridge | Out-Null
**********************
Command start time: 20250911171212
**********************
PS [HOME]\\Projects
**********************
Command start time: 20250911171211
**********************
ðŸŸ¢ Transcript recording to: C:\Projects\Bridge\transcripts\ps_transcript_20250911_171115.txt
PS C:\Users\mailg> Write-Host "ðŸŸ¢ Transcript recording to: $Transcript"
**********************
Command start time: 20250911171115
**********************
**********************
SerializationVersion: 1.1.0.1
PSRemotingProtocolVersion: 2.3
WSManStackVersion: 3.0
CLRVersion: 4.0.30319.42000
BuildVersion: 10.0.19041.6328
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.19041.6328
PSEdition: Desktop
PSVersion: 5.1.19041.6328
Process ID: 5576
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Machine: DESKTOP-C9G76VK (Microsoft Windows NT 10.0.19045.0)
Configuration Name: 
RunAs User: DESKTOP-C9G76VK\mailg
Username: DESKTOP-C9G76VK\mailg
Start time: 20250911171115
Windows PowerShell transcript start
**********************

PS C:\Projects\GroundMesh-DEV> pt
**********************
Command start time: 20250911205647
**********************
PS C:\Projects\GroundMesh-DEV> # Publish now so I can read it immediately
**********************
Command start time: 20250911205647
**********************
'@ | Set-Content -Encoding UTF8 (Join-Path $Tools 'publish-tail.ps1')
Write-Host ('PRETTY (commit):   ' + "$baseBlob/$sha/public-bridge/tail.md")
Write-Host ('RAW (commit):      ' + "$baseRaw/$sha/public-bridge/tail.txt")
Write-Host ('RAW (cachebuster): ' + "$baseRaw/bridge-public/public-bridge/tail.txt?ts=$ts")
# 7) Print the three URLs (so you see them; Iâ€™ll use the cachebuster one)

Pop-Location
Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
& git push -u origin bridge-public
& git commit -F $MsgFile
& git add public-bridge\latest.json
Set-Content -Path $MsgFile -Value 'publish latest.json (cacheproof pointers)' -Encoding UTF8
$MsgFile = Join-Path (Get-Location) 'COMMITMSG.txt'

$latest | ConvertTo-Json -Depth 4 | Out-File -FilePath $LatestFile -Encoding utf8 -Force
$LatestFile = Join-Path $OutDir 'latest.json'
}
  pretty_commit_url    = "$baseBlob/$sha/public-bridge/tail.md"
  raw_commit_url       = "$baseRaw/$sha/public-bridge/tail.txt"
  raw_cachebuster_url  = "$baseRaw/bridge-public/public-bridge/tail.txt?ts=$ts"
  commit               = $sha
  updated              = $updated
$latest = [ordered]@{

$baseBlob = 'https://github.com/mailgmirko-creator/groundmesh/blob'
$baseRaw  = 'https://raw.githubusercontent.com/mailgmirko-creator/groundmesh'
$sha = (git rev-parse HEAD).Trim()
# 6) Compute commit SHA and write latest.json pointer, then commit/push again

Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
& git push -u origin bridge-public
& git commit -F $MsgFile
& git add public-bridge\tail.md
& git add public-bridge\tail.txt
Set-Content -Path $MsgFile -Value 'publish tail snapshot (cacheproof step 1)' -Encoding UTF8
$MsgFile = Join-Path (Get-Location) 'COMMITMSG.txt'
Push-Location $WorktreeRoot
# 5) Commit/push the snapshot from INSIDE the worktree

[IO.File]::WriteAllLines($MdFile, $md, $enc)
$md.Add('```') | Out-Null
foreach($l in $redacted){ $md.Add($l) | Out-Null }
$md.Add('```text') | Out-Null
$md.Add('') | Out-Null
$md.Add('- Updated: ' + $updated) | Out-Null
$md.Add('') | Out-Null
$md.Add('# PowerShell Transcript Tail (Aggregated)') | Out-Null
$md = New-Object System.Collections.Generic.List[string]
# tail.md â€” human order with header

[IO.File]::WriteAllLines($TxtFile, @("AGGREGATED | Updated: $updated") + $rev, $enc)
$rev = $redacted.Clone(); [Array]::Reverse($rev)
# tail.txt â€” newest-first with header

$ts = Get-Date -Format 'yyyyMMddHHmmss'
$updated = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
$enc = New-Object Text.UTF8Encoding($false)
New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
$MdFile  = Join-Path $OutDir 'tail.md'
$TxtFile = Join-Path $OutDir 'tail.txt'
$OutDir  = Join-Path $WorktreeRoot 'public-bridge'
# 4) Write outputs into the dedicated worktree

}
  $x
  $x = [regex]::Replace($x,'([A-Za-z]:\\Users\\[^\\]+\\)','[HOME]\\')
  $x = [regex]::Replace($x,'Bearer\s+[A-Za-z0-9\._\-]+','Bearer [REDACTED]')
  $x = [regex]::Replace($x,'sk-[A-Za-z0-9\-_]{20,}','[REDACTED_KEY]')
  $x = [regex]::Replace($x,'ghp_[A-Za-z0-9]{36,}','[REDACTED_GH_TOKEN]')
  $x = $line
$redacted = foreach ($line in $globalTail) {
# 3) Redact per line

if (-not $globalTail) { $globalTail = @('<empty>') }
$globalTail = $lines | Select-Object -Last $Count
}
  }
    foreach ($p in $parts) { if ($p -ne $null) { $lines.Add($p) | Out-Null } }
    $parts = [Text.RegularExpressions.Regex]::Split($t,'\r?\n')
  if ($t) {
  $t = Read-UnlockedText -Path $f.FullName
foreach ($f in $pick) {
$lines  = New-Object System.Collections.Generic.List[string]
# 2) Merge lines and take global tail

$pick = $all | Sort-Object Name -Descending | Select-Object -First $LookBackFiles
if (-not $all) { Write-Output 'No transcript found.'; exit 1 }
$all = Get-ChildItem -Path $TranscriptDir -Filter 'ps_transcript_*.txt' -ErrorAction SilentlyContinue
# 1) Collect newest-by-name transcripts

}
  } catch { return $null }
    finally { $fs.Close() }
    try { $sr = New-Object IO.StreamReader($fs,[Text.Encoding]::UTF8,$true); $t=$sr.ReadToEnd(); $sr.Close(); return $t }
    $fs = New-Object System.IO.FileStream($Path,[IO.FileMode]::Open,[IO.FileAccess]::Read,[IO.FileShare]::ReadWrite)
  try {
  param([string]$Path)
function Read-UnlockedText {

)
  [string]$WorktreeRoot = "C:\Projects\GroundMesh-DEV\.bridge-wt"
  [int]$LookBackFiles = 6,
  [Alias("Lines")][int]$Count = 400,
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\GroundMesh-DEV> @'
**********************
Command start time: 20250911205647
**********************
PS C:\Projects\GroundMesh-DEV> New-Item -ItemType Directory -Force -Path $Tools | Out-Null
**********************
Command start time: 20250911205647
**********************
PS C:\Projects\GroundMesh-DEV> $Tools   = Join-Path $DevRepo "tools"
**********************
Command start time: 20250911205647
**********************
PS C:\Projects\GroundMesh-DEV> $DevRepo = "C:\Projects\GroundMesh-DEV"
**********************
Command start time: 20250911205647
**********************
PS C:\Projects\GroundMesh-DEV> # === Upgrade publisher: commit-pinned URLs + cachebuster + latest.json pointer ===
**********************
Command start time: 20250911205647
**********************




PS C:\Projects\GroundMesh-DEV> pt
**********************
Command start time: 20250911203952
**********************
Job OK -> C:\Projects\GroundMesh-DEV\grid\outbox\result_tsl_principles_learn_20250911_203952.json

Picked job: tsl_principles_learn_20250911_203952.json
PS C:\Projects\GroundMesh-DEV> & "C:\Projects\GroundMesh-DEV\tools\grid-worker.ps1"
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> Copy-Item "apps/tsl/jobs/learn_principles.json" $JobEnq -Force
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> $JobEnq = Join-Path $Inbox ("tsl_principles_learn_" + $Stamp + ".json")
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> $Inbox  = Join-Path $DevRepo "grid\inbox"
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> $Stamp  = Get-Date -Format "yyyyMMdd_HHmmss"
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> # Enqueue a fresh job, run one cycle, refresh eyes so I can see it
**********************
Command start time: 20250911203952
**********************
PS C:\Projects\GroundMesh-DEV> Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
**********************
Command start time: 20250911203952
**********************

PS C:\Projects\GroundMesh-DEV> git push -u origin dev
**********************
Command start time: 20250911203949
**********************

PS C:\Projects\GroundMesh-DEV> git commit -F $MsgFile
**********************
Command start time: 20250911203949
**********************

PS C:\Projects\GroundMesh-DEV> git add tools/grid-worker.ps1 grid/**/.gitkeep
**********************
Command start time: 20250911203949
**********************
PS C:\Projects\GroundMesh-DEV> Set-Content -Path $MsgFile -Encoding UTF8 -Value "fix(grid): absolute repo paths and ensured outbox; add .gitkeep"
**********************
Command start time: 20250911203949
**********************
PS C:\Projects\GroundMesh-DEV> $MsgFile = Join-Path $DevRepo "COMMITMSG.txt"
**********************
Command start time: 20250911203949
**********************
PS C:\Projects\GroundMesh-DEV> # Commit the fixed worker + .gitkeep files
**********************
Command start time: 20250911203949
**********************
'@ | Set-Content -Encoding UTF8 (Join-Path $Tools "grid-worker.ps1")
}
  }
    Write-Host ("Unsupported job type: {0}" -f $jobType)
    Move-Item $jobFile.FullName (Join-Path $Failed $jobFile.Name) -Force
    Write-ResultJson -Path $outFile -Obj $res
    $outFile = Join-Path $Outbox ("result_" + [IO.Path]::GetFileNameWithoutExtension($jobFile.Name) + ".json")
    }
      status   = "unsupported_job_type"
      finished = (Get-Date).ToString("s")
      started  = $started.ToString("s")
      job_type = $jobType
    $res = @{
  default {
  }
    Write-Host ("Job OK -> {0}" -f $outFile)
    Move-Item $jobFile.FullName (Join-Path $Processed $jobFile.Name) -Force
    Write-ResultJson -Path $outFile -Obj $res
    $outFile = Join-Path $Outbox ("result_" + [IO.Path]::GetFileNameWithoutExtension($jobFile.Name) + ".json")
    }
      outputs  = @{ model_file = $model; size_bytes = $size }
      status   = "success"
      finished = (Get-Date).ToString("s")
      started  = $started.ToString("s")
      job_type = $jobType
    $res  = @{
    $size = (Get-Item $model).Length

    if (-not (Test-Path $model)) { throw "Model file missing after run: $model" }
    if ($LASTEXITCODE -ne 0) { throw "Learner failed with exit code $LASTEXITCODE." }
    & python (Join-Path $RepoRoot "apps\tsl\tsl_core\learner.py") $inYaml $outDir

    if (-not $py) { throw "Python not found on PATH." }
    $py = Get-Command python -ErrorAction SilentlyContinue

    New-Item -ItemType Directory -Force -Path $outDir | Out-Null

    $model   = Join-Path $outDir ($job.outputs.model_file)
    $outDir  = Join-Path $RepoRoot $job.outputs.artifact_dir
    $inYaml  = Join-Path $RepoRoot $job.inputs.principles_yaml
  'tsl_principles_learn' {
switch ($jobType) {

$started = Get-Date
$jobType = $job.job_type

}
  exit 1
  Move-Item $jobFile.FullName (Join-Path $Failed $jobFile.Name) -Force
  Write-Host ("Invalid job JSON: {0}" -f $jobFile.Name)
catch {
try { $job = Get-Content $jobFile.FullName -Raw | ConvertFrom-Json }

Write-Host ("Picked job: {0}" -f $jobFile.Name)

if (-not $jobFile) { Write-Host "No jobs in $Inbox"; exit 0 }
$jobFile = Get-ChildItem $Inbox -Filter *.json -ErrorAction SilentlyContinue | Sort-Object Name | Select-Object -First 1

}
  [IO.File]::WriteAllText($Path, $json, [Text.UTF8Encoding]::new($false))
  $json = $Obj | ConvertTo-Json -Depth 8
function Write-ResultJson { param([string]$Path,[hashtable]$Obj)

$null = New-Item -ItemType Directory -Force -Path $Inbox,$Outbox,$Processed,$Failed
# Ensure dirs exist

$Failed    = Join-Path $RepoRoot $FailedRel
