AGGREGATED | Updated: 2025-09-11 19:53:10



-a----        11/09/2025     17:12           1848 reader.ps1
----                 -------------         ------ ----
Mode                 LastWriteTime         Length Name


    Directory: C:\Projects\Bridge


PS C:\Projects\Bridge> Get-ChildItem .\reader.ps1
**********************
Command start time: 20250911171240
**********************
PS C:\Projects\Bridge> # Verify it exists
**********************
Command start time: 20250911171240
**********************
'@ | Set-Content -Encoding UTF8 .\reader.ps1
}
  }
    $ctx.Response.OutputStream.Close()
  } finally {
    Write-Host "Bridge error: $_" -ForegroundColor Red
  } catch {
    }
      }
        $res.OutputStream.Write($bytes,0,$bytes.Length)
        $res.StatusCode = 200
        $res.ContentType = "text/plain; charset=utf-8"
        $bytes = [Text.Encoding]::UTF8.GetBytes($msg)
        $msg = "Use /tail to read the latest $Tail lines."
      default {
      }
        $res.OutputStream.Write($bytes,0,$bytes.Length)
        $res.StatusCode = 200
        $res.ContentType = "text/plain; charset=utf-8"
        $bytes = [Text.Encoding]::UTF8.GetBytes($text)
        $text  = ($lines -join "`n")
        $lines = Get-Content $file -ErrorAction SilentlyContinue | Select-Object -Last $Tail
        }
          break
          $res.OutputStream.Write($bytes,0,$bytes.Length)
          $res.StatusCode = 404
          $bytes = [Text.Encoding]::UTF8.GetBytes($msg)
          $msg = "No transcript files found."
        if (-not $file) {
        $file = Get-LatestTranscript -Dir $TranscriptDir
      "/tail" {
    switch ($req.Url.AbsolutePath) {

    $res = $ctx.Response
    $req = $ctx.Request
  try {
  $ctx = $listener.GetContext()
while ($listener.IsListening) {

}
  if ($files) { return $files[0].FullName } else { return $null }
  $files = Get-ChildItem $Dir -Filter "ps_transcript_*.txt" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending
  param([string]$Dir)
function Get-LatestTranscript {

Write-Host "üîé Bridge reader listening on $prefix"
$listener.Start()
$listener.Prefixes.Add($prefix)
$listener.Prefixes.Clear()
$prefix = "http://127.0.0.1:$Port/"
$listener = [System.Net.HttpListener]::new()

Add-Type -AssemblyName System.Net.HttpListener

)
  [int]$Tail = 400
  [int]$Port = 5059,
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\Bridge> @'
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> cd C:\Projects\Bridge
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> New-Item -ItemType Directory -Force -Path C:\Projects\Bridge | Out-Null
**********************
Command start time: 20250911171240
**********************
PS C:\Projects\Bridge> cd C:\Projects
**********************
Command start time: 20250911171240
**********************
PS C:\Projects> cd C:\Projects\Bridge
**********************
Command start time: 20250911171212
**********************
PS C:\Projects> New-Item -ItemType Directory -Force -Path C:\Projects\Bridge | Out-Null
**********************
Command start time: 20250911171212
**********************
PS [HOME]\\Projects
**********************
Command start time: 20250911171211
**********************
üü¢ Transcript recording to: C:\Projects\Bridge\transcripts\ps_transcript_20250911_171115.txt
PS C:\Users\mailg> Write-Host "üü¢ Transcript recording to: $Transcript"
**********************
Command start time: 20250911171115
**********************
**********************
SerializationVersion: 1.1.0.1
PSRemotingProtocolVersion: 2.3
WSManStackVersion: 3.0
CLRVersion: 4.0.30319.42000
BuildVersion: 10.0.19041.6328
PSCompatibleVersions: 1.0, 2.0, 3.0, 4.0, 5.0, 5.1.19041.6328
PSEdition: Desktop
PSVersion: 5.1.19041.6328
Process ID: 5576
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Machine: DESKTOP-C9G76VK (Microsoft Windows NT 10.0.19045.0)
Configuration Name: 
RunAs User: DESKTOP-C9G76VK\mailg
Username: DESKTOP-C9G76VK\mailg
Start time: 20250911171115
Windows PowerShell transcript start
**********************
=== SRC: ps_transcript_20250911_171115.txt ===

PS C:\Projects\GroundMesh-DEV> pt
**********************
Command start time: 20250911195310
**********************
PS C:\Projects\GroundMesh-DEV> # auto-publish so I can read it immediately
**********************
Command start time: 20250911195310
**********************
'@ | Set-Content -Encoding UTF8 (Join-Path $Tools 'publish-tail.ps1')
Pop-Location
Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
& git push -u origin bridge-public
& git commit -F $MsgFile
& git add public-bridge\tail.md
& git add public-bridge\tail.txt
& git checkout bridge-public | Out-Null
Set-Content -Path $MsgFile -Value 'publish tail snapshot (aggregated)' -Encoding UTF8
$MsgFile = Join-Path (Get-Location) 'COMMITMSG.txt'
Push-Location (Join-Path $PSScriptRoot '..')
# 6) Commit & push (message file to avoid quoting issues)

[System.IO.File]::WriteAllLines($MdFile, $mdList, $enc)
$mdList.Add('```') | Out-Null
foreach($line in $redacted){ $mdList.Add($line) | Out-Null }
$mdList.Add('```text') | Out-Null
$mdList.Add('') | Out-Null
$mdList.Add( ('- Files considered: {0}' -f (($pick | Select-Object -ExpandProperty Name) -join ', ')) ) | Out-Null
$mdList.Add( ('- Updated: {0}' -f $updated) ) | Out-Null
$mdList.Add('') | Out-Null
$mdList.Add('# PowerShell Transcript Tail (Aggregated)') | Out-Null
$mdList = New-Object System.Collections.Generic.List[string]
# tail.md ‚Äî human-friendly order, with header

[System.IO.File]::WriteAllLines($TxtFile, $txtOut, $enc)
$txtOut = @("AGGREGATED | Updated: $updated") + $rev
$rev = $redacted.Clone(); [Array]::Reverse($rev)
# tail.txt ‚Äî newest-first for the ‚Äúeyes‚Äù

$updated = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
$enc = New-Object System.Text.UTF8Encoding($false)
New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
$MdFile  = Join-Path $OutDir 'tail.md'
$TxtFile = Join-Path $OutDir 'tail.txt'
$OutDir  = Join-Path $PSScriptRoot '..\public-bridge'
# 5) Write outputs

}
  $x
  $x = [regex]::Replace($x, '([A-Za-z]:\\Users\\[^\\]+\\)', '[HOME]\\')
  $x = [regex]::Replace($x, 'Bearer\s+[A-Za-z0-9\._\-]+', 'Bearer [REDACTED]')
  $x = [regex]::Replace($x, 'sk-[A-Za-z0-9\-_]{20,}', '[REDACTED_KEY]')
  $x = [regex]::Replace($x, 'ghp_[A-Za-z0-9]{36,}', '[REDACTED_GH_TOKEN]')
  $x = $line
$redacted = foreach ($line in $globalTail) {
# 4) Redactions per-line

if (-not $globalTail) { $globalTail = @('<empty>') }
$globalTail = $lines | Select-Object -Last $Count
# 3) Take the global tail (last N lines across all picked files)

}
  }
    foreach ($p in $parts) { if ($p -ne $null) { $lines.Add($p) | Out-Null } }
    $parts = [System.Text.RegularExpressions.Regex]::Split($t, '\r?\n')
    $lines.Add(("=== SRC: {0} ===" -f $f.Name)) | Out-Null
  if ($t) {
  $t = Read-UnlockedText -Path $f.FullName
foreach ($f in $pick) {
$lines = New-Object System.Collections.Generic.List[string]
# 2) Read each file (unlocked), split into lines, prepend a file marker

$pick = $all | Sort-Object Name -Descending | Select-Object -First $LookBackFiles
if (-not $all) { Write-Output 'No transcript found.'; exit 1 }
$all = Get-ChildItem -Path $TranscriptDir -Filter 'ps_transcript_*.txt' -ErrorAction SilentlyContinue
# 1) Gather newest-by-name transcripts (handles multiple windows)

}
  } catch { return $null }
    } finally { $fs.Close() }
      return $text
      $sr.Close()
      $text = $sr.ReadToEnd()
      $sr = New-Object System.IO.StreamReader($fs, [System.Text.Encoding]::UTF8, $true)
    try {
    $fs = New-Object System.IO.FileStream($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite)
  try {
  param([string]$Path)
function Read-UnlockedText {

)
  [int]$LookBackFiles = 5
  [Alias("Lines")][int]$Count = 400,
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\GroundMesh-DEV> @'
**********************
Command start time: 20250911195310
**********************
PS C:\Projects\GroundMesh-DEV> New-Item -ItemType Directory -Force -Path $Tools | Out-Null
**********************
Command start time: 20250911195310
**********************
PS C:\Projects\GroundMesh-DEV> $Tools   = Join-Path $DevRepo "tools"
**********************
Command start time: 20250911195310
**********************
PS C:\Projects\GroundMesh-DEV> $DevRepo = "C:\Projects\GroundMesh-DEV"
**********************
Command start time: 20250911195309
**********************
PS C:\Projects\GroundMesh-DEV> # Upgrade publisher: merge last few transcript files, then take last N lines
**********************
Command start time: 20250911195309
**********************
PS C:\Projects\GroundMesh-DEV> New-Item -ItemType Directory -Force -Path $Tools | Out-Null
**********************
Command start time: 20250911195245
**********************
PS C:\Projects\GroundMesh-DEV> $Tools   = Join-Path $DevRepo "tools"
**********************
Command start time: 20250911195245
**********************
PS C:\Projects\GroundMesh-DEV> $DevRepo = "C:\Projects\GroundMesh-DEV"
**********************
Command start time: 20250911195245
**********************
PS C:\Projects\GroundMesh-DEV> # Upgrade publisher: merge last few transcript files, then take last N lines
**********************
Command start time: 20250911195245
**********************
branch 'bridge-public' set up to track 'origin/bridge-public'.
   5fc8fa6..40a18e7  bridge-public -> bridge-public
To github.com:mailgmirko-creator/groundmesh.git
remote: Resolving deltas: 100% (2/2), completed with 1 local object.
Total 5 (delta 2), reused 0 (delta 0), pack-reused 0 (from 0)
Writing objects: 100% (5/5), 3.95 KiB | 1.97 MiB/s, done.
Compressing objects: 100% (5/5), done.
Delta compression using up to 8 threads
Counting objects: 100% (9/9), done.
Enumerating objects: 9, done.
 2 files changed, 415 insertions(+), 2 deletions(-)
[bridge-public 40a18e7] Ôªøpublish tail snapshot (unlocked read + fallback)


PS C:\Projects\GroundMesh-DEV> pt
**********************
Command start time: 20250911195009
**********************
PS C:\Projects\GroundMesh-DEV> # Publish now (eyes auto-refresh)
**********************
Command start time: 20250911195009
**********************
'@ | Set-Content -Encoding UTF8 (Join-Path $Tools 'publish-tail.ps1')
Pop-Location
Remove-Item $MsgFile -Force -ErrorAction SilentlyContinue
& git push -u origin bridge-public
& git commit -F $MsgFile
& git add public-bridge\tail.md
& git add public-bridge\tail.txt
& git checkout bridge-public | Out-Null
Set-Content -Path $MsgFile -Value 'publish tail snapshot (unlocked read + fallback)' -Encoding UTF8
$MsgFile = Join-Path (Get-Location) 'COMMITMSG.txt'
Push-Location (Join-Path $PSScriptRoot '..')
# 5) Commit & push (message file to avoid quoting issues)

[System.IO.File]::WriteAllLines($MdFile, $mdList, $enc)
$mdList.Add('```') | Out-Null
foreach($line in $redacted){ $mdList.Add($line) | Out-Null }
$mdList.Add('```text') | Out-Null
$mdList.Add('') | Out-Null
$mdList.Add( ('- Source file: {0}' -f $srcName) ) | Out-Null
$mdList.Add( ('- Updated: {0}' -f $updated) ) | Out-Null
$mdList.Add('') | Out-Null
$mdList.Add('# PowerShell Transcript Tail') | Out-Null
$mdList  = New-Object System.Collections.Generic.List[string]
# tail.md ‚Äî normal order with header (for humans)

[System.IO.File]::WriteAllLines($TxtFile, $txtOut, $enc)
$txtOut = @("SRC: $srcName | Updated: $updated") + $rev
$rev = $redacted.Clone(); [Array]::Reverse($rev)
# tail.txt ‚Äî newest-first with header (for the eyes)

$updated = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'
$enc = New-Object System.Text.UTF8Encoding($false)
New-Item -ItemType Directory -Force -Path $OutDir | Out-Null
$MdFile  = Join-Path $OutDir 'tail.md'
$TxtFile = Join-Path $OutDir 'tail.txt'
$OutDir  = Join-Path $PSScriptRoot '..\public-bridge'
# 4) Write outputs

}
  $x
  $x = [regex]::Replace($x, '([A-Za-z]:\\Users\\[^\\]+\\)', '[HOME]\\')
  $x = [regex]::Replace($x, 'Bearer\s+[A-Za-z0-9\._\-]+', 'Bearer [REDACTED]')
  $x = [regex]::Replace($x, 'sk-[A-Za-z0-9\-_]{20,}', '[REDACTED_KEY]')
  $x = [regex]::Replace($x, 'ghp_[A-Za-z0-9]{36,}', '[REDACTED_GH_TOKEN]')
  $x = $line
$redacted = foreach($line in $tailLines){
# 3) Redactions (per line)

if (-not $tailLines) { $tailLines = @('<empty transcript>') }
$tailLines = $allLines | Where-Object { $_ -ne $null } | Select-Object -Last $Count
$allLines = [System.Text.RegularExpressions.Regex]::Split($content, '\r?\n')
# 2) Split content on CRLF/LF (regex)

$srcName = $chosen.Name
if (-not $chosen) { Write-Output 'Could not read any transcript (locked).'; exit 1 }
}
  if ($content) { $chosen = $f; break }
  $content = Read-UnlockedText -Path $f.FullName
foreach ($f in $files | Select-Object -First 5) {
$chosen = $null; $content = $null

if (-not $files) { Write-Output 'No transcript found.'; exit 1 }
$files = Get-ChildItem -Path $TranscriptDir -Filter 'ps_transcript_*.txt' -ErrorAction SilentlyContinue | Sort-Object Name -Descending
# 1) Pick latest transcript by NAME; try newest‚Üíolder until one can be read

}
  }
    return $null
  } catch {
    } finally { $fs.Close() }
      return $text
      $sr.Close()
      $text = $sr.ReadToEnd()
      $sr = New-Object System.IO.StreamReader($fs, [System.Text.Encoding]::UTF8, $true)
    try {
    $fs = New-Object System.IO.FileStream($Path, [System.IO.FileMode]::Open, [System.IO.FileAccess]::Read, [System.IO.FileShare]::ReadWrite)
  try {
  param([string]$Path)
function Read-UnlockedText {

)
  [Alias("Lines")][int]$Count = 400
  [string]$TranscriptDir = "C:\Projects\Bridge\transcripts",
param(
PS C:\Projects\GroundMesh-DEV> @'
**********************
Command start time: 20250911195009
**********************
PS C:\Projects\GroundMesh-DEV> New-Item -ItemType Directory -Force -Path $Tools | Out-Null
**********************
Command start time: 20250911195008
**********************
PS C:\Projects\GroundMesh-DEV> $Tools   = Join-Path $DevRepo "tools"
**********************
Command start time: 20250911195008
**********************
PS C:\Projects\GroundMesh-DEV> $DevRepo = "C:\Projects\GroundMesh-DEV"
**********************
Command start time: 20250911195008
**********************
PS C:\Projects\GroundMesh-DEV> # Overwrite publisher: read unlocked + fallback to previous transcript if newest is locked
**********************
Command start time: 20250911195008
**********************
branch 'bridge-public' set up to track 'origin/bridge-public'.
   5fa157a..5fc8fa6  bridge-public -> bridge-public
To github.com:mailgmirko-creator/groundmesh.git
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
Total 5 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
Writing objects: 100% (5/5), 560 bytes | 280.00 KiB/s, done.
Compressing objects: 100% (5/5), done.
Delta compression using up to 8 threads
Counting objects: 100% (9/9), done.
Enumerating objects: 9, done.
 2 files changed, 3 insertions(+), 260 deletions(-)
[bridge-public 5fc8fa6] Ôªøpublish tail snapshot (latest-by-name + stamped)

